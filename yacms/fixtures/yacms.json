Running with BASE_DIR: /home/jnvilo/www.jnvilo.com/software/www_jnvilo_com
[{"fields": {"path": "/", "parent": null}, "model": "yacms.paths", "pk": 1}, {"fields": {"path": "/sysadmin", "parent": 1}, "model": "yacms.paths", "pk": 2}, {"fields": {"path": "/programming", "parent": 1}, "model": "yacms.paths", "pk": 3}, {"fields": {"path": "/blog", "parent": 1}, "model": "yacms.paths", "pk": 4}, {"fields": {"path": "/sysadmin/linux", "parent": 2}, "model": "yacms.paths", "pk": 5}, {"fields": {"path": "/sysadmin/os-x", "parent": 2}, "model": "yacms.paths", "pk": 6}, {"fields": {"path": "/sysadmin/webservers", "parent": 2}, "model": "yacms.paths", "pk": 7}, {"fields": {"path": "/sysadmin/puppet", "parent": 2}, "model": "yacms.paths", "pk": 8}, {"fields": {"path": "/programming/bash", "parent": 3}, "model": "yacms.paths", "pk": 9}, {"fields": {"path": "/programming/javascript", "parent": 3}, "model": "yacms.paths", "pk": 10}, {"fields": {"path": "/programming/python", "parent": 3}, "model": "yacms.paths", "pk": 11}, {"fields": {"path": "/blog/my-ramblings-and-stupidity", "parent": 4}, "model": "yacms.paths", "pk": 12}, {"fields": {"path": "/blog/development", "parent": 4}, "model": "yacms.paths", "pk": 13}, {"fields": {"path": "/about", "parent": 1}, "model": "yacms.paths", "pk": 15}, {"fields": {"path": "/sysadmin/webservers/lighttpd", "parent": 7}, "model": "yacms.paths", "pk": 16}, {"fields": {"path": "/sysadmin/webservers/lighttpd/lighttpd-install-howto-with-yum-on-centos", "parent": 16}, "model": "yacms.paths", "pk": 17}, {"fields": {"path": "/sysadmin/linux/howto-check-swap-usage-in-linux", "parent": 5}, "model": "yacms.paths", "pk": 18}, {"fields": {"path": "/sysadmin/linux/how-to-recover-root-password-under-centos-with-single-user-mode", "parent": 5}, "model": "yacms.paths", "pk": 19}, {"fields": {"path": "/sysadmin/webservers/nginx", "parent": 7}, "model": "yacms.paths", "pk": 20}, {"fields": {"path": "/sysadmin/webservers/nginx/howto-install-nginx-on-centos-6-using-yum", "parent": 20}, "model": "yacms.paths", "pk": 21}, {"fields": {"path": "/programming/python/signal-and-slots-implementation-in-python", "parent": 11}, "model": "yacms.paths", "pk": 22}, {"fields": {"path": "/sysadmin/databases", "parent": 2}, "model": "yacms.paths", "pk": 23}, {"fields": {"path": "/sysadmin/databases/postgresql", "parent": 23}, "model": "yacms.paths", "pk": 24}, {"fields": {"path": "/sysadmin/databases/postgresql/howto-backup-and-restore-your-postgresql-databases", "parent": 24}, "model": "yacms.paths", "pk": 25}, {"fields": {"path": "/sysadmin/linux/howto-setup-crontab-under-linux-or-unix", "parent": 5}, "model": "yacms.paths", "pk": 26}, {"fields": {"path": "/blog/techstuff/apple-os-x", "parent": 42}, "model": "yacms.paths", "pk": 27}, {"fields": {"path": "/blog/techstuff/enable-safari-developer-tools", "parent": 42}, "model": "yacms.paths", "pk": 28}, {"fields": {"path": "/sysadmin/webservers/nginx/enable-gzip-compression-in-nginx", "parent": 20}, "model": "yacms.paths", "pk": 29}, {"fields": {"path": "/sysadmin/os-x/installing-nginx-and-php-on-os-x", "parent": 6}, "model": "yacms.paths", "pk": 30}, {"fields": {"path": "/blog/techstuff/installing-esxi-on-vmware-fusion-on-os-x-", "parent": 42}, "model": "yacms.paths", "pk": 31}, {"fields": {"path": "/blog/development/django-runtimeerror-app-registry-isnt-ready-yet--with-tastypie", "parent": 41}, "model": "yacms.paths", "pk": 32}, {"fields": {"path": "/sysadmin/virtualization", "parent": 2}, "model": "yacms.paths", "pk": 34}, {"fields": {"path": "/sysadmin/virtualization/docker", "parent": 34}, "model": "yacms.paths", "pk": 35}, {"fields": {"path": "/sysadmin/virtualization/vmware", "parent": 34}, "model": "yacms.paths", "pk": 36}, {"fields": {"path": "/sysadmin/virtualization/virtualbox", "parent": 34}, "model": "yacms.paths", "pk": 37}, {"fields": {"path": "/sysadmin/virtualization/xen", "parent": 34}, "model": "yacms.paths", "pk": 38}, {"fields": {"path": "/sysadmin/virtualization/kvm", "parent": 34}, "model": "yacms.paths", "pk": 39}, {"fields": {"path": "/sysadmin/virtualization/docker/howto-install-and-use-docker-on-fedora-20", "parent": 35}, "model": "yacms.paths", "pk": 40}, {"fields": {"path": "/blog/development", "parent": 4}, "model": "yacms.paths", "pk": 41}, {"fields": {"path": "/blog/techstuff", "parent": 4}, "model": "yacms.paths", "pk": 42}, {"fields": {"path": "/sysadmin/linux/how-to-list-all-hidden-files-in-a-directory-recursively", "parent": 5}, "model": "yacms.paths", "pk": 43}, {"fields": {"path": "/sysadmin/databases/postgresql/install-postgresql-on-centos-65-via-yum", "parent": 24}, "model": "yacms.paths", "pk": 44}, {"fields": {"path": "/sysadmin/webservers/apache", "parent": 7}, "model": "yacms.paths", "pk": 45}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:23:04.956Z", "title": "cms", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:23:04.957Z", "path": 1, "slug": "", "published": false}, "model": "yacms.pages", "pk": 1}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:24:25.708Z", "title": "SysAdmin/DevOps", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:24:25.708Z", "path": 2, "slug": "sysadmin", "published": false}, "model": "yacms.pages", "pk": 2}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:24:33.128Z", "title": "Programming", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:24:33.128Z", "path": 3, "slug": "programming", "published": false}, "model": "yacms.pages", "pk": 3}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:24:38Z", "title": "Blogs", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:24:38.777Z", "path": 4, "slug": "blog", "published": false}, "model": "yacms.pages", "pk": 4}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:25:00.121Z", "title": "Linux", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:25:00.121Z", "path": 5, "slug": "linux", "published": false}, "model": "yacms.pages", "pk": 5}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:25:14.088Z", "title": "OS X", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:25:14.089Z", "path": 6, "slug": "os-x", "published": false}, "model": "yacms.pages", "pk": 6}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:25:21.677Z", "title": "WebServers", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:25:21.677Z", "path": 7, "slug": "webservers", "published": false}, "model": "yacms.pages", "pk": 7}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:25:33.966Z", "title": "Puppet", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:25:33.967Z", "path": 8, "slug": "puppet", "published": false}, "model": "yacms.pages", "pk": 8}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:26:12.401Z", "title": "Bash", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:26:12.401Z", "path": 9, "slug": "bash", "published": false}, "model": "yacms.pages", "pk": 9}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:26:18.620Z", "title": "Javascript", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:26:18.620Z", "path": 10, "slug": "javascript", "published": false}, "model": "yacms.pages", "pk": 10}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:26:23.132Z", "title": "Python", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:26:23.133Z", "path": 11, "slug": "python", "published": false}, "model": "yacms.pages", "pk": 11}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:27:14.704Z", "title": "Ramblings and Stupid Things And Whatever", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:27:14.704Z", "path": 12, "slug": "my-ramblings-and-stupidity", "published": false}, "model": "yacms.pages", "pk": 12}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:27:24.827Z", "title": "Development", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:27:24.827Z", "path": 13, "slug": "development", "published": false}, "model": "yacms.pages", "pk": 13}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:28:00.033Z", "title": "About", "frontpage": false, "content": "==What is jnvilo.com?\n\n\n\njnvilo.com is a technology sysadmin resource website and is also my (Jason Viloria) personal website. It started out as a cgi script written in perl , storing the blog entries in text files under the domain name jasonlinux.com. I wrote the first iteration of jasonlinux.com in 2002 and then migrated to jnvilo.com in 2007. In the course of a decade, I moved from perl, to php and now currently python. I have removed much of the old contents keeping only the latest years updates so in effect this is a new website.\n\n==What does jnvilo stand for?\n\njnvilo is an abbreviation of my name and surname concatinated together. It was my first every unix account name. In 1996 I was given a unix account at the university of Malta and the account was \"jnvilo\". ", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-08-18T10:28:00.033Z", "path": 15, "slug": "about", "published": true}, "model": "yacms.pages", "pk": 15}, {"fields": {"meta_description": "", "date_modified": "2014-08-18T10:30:05.168Z", "title": "Lighttpd", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-18T10:30:05.170Z", "path": 16, "slug": "lighttpd", "published": false}, "model": "yacms.pages", "pk": 16}, {"fields": {"meta_description": "", "date_modified": "2013-05-14T20:00:00Z", "title": "Lighttpd Install Howto with yum on CentOS", "frontpage": true, "content": "In this mini how to, we shall look at installing Lighttpd on a CentOS server. Lighttpd as its name implies is a light https web server. It is amazingly fast, secure and is optimised for high performance work loads. The server uses very little memory compared to many other web servers and also low on cpu load. It has the following advantages:\n\n* FastCGI\n* CGI\n* Auth\n* Compression\n* URL rewrite.\n\n===Enable EPEL CentOS repository\n\nThe lighttpd server is not part of default CentOS or RHEL based system. To install lighttpd using the yum command, first grab the latest epel release file, enter:\n\n<<code ext=\"bash\">>\nwget http://epel.mirror.net.in/epel/6/i386/epel-release-6-8.noarch.rpm\n<</code>>\nA sample output is as follows:\n\n\n<<code ext=\"bash\">>\n--2014-02-23 12:24:52--  http://epel.mirror.net.in/epel/6/i386/epel-release-6-8.noarch.rpm\nResolving epel.mirror.net.in... 120.88.47.14, 2401:4800:2121:c0:ff:ee:ee:2\nConnecting to epel.mirror.net.in|120.88.47.14|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 14540 (14K) [application/x-redhat-package-manager]\nSaving to: \u201cepel-release-6-8.noarch.rpm\u201d\n \n100%[==========================================================================================>] 14,540      54.6K/s   in 0.3s\n \n2014-02-23 12:24:53 (54.6 KB/s) - \u201cepel-release-6-8.noarch.rpm\u201d saved [14540/14540]\n<</code>>\n\n\n===CentOS Linux install Lighttpd web-server\n\nType the following yum command:\n\n\n<<code ext=\"bash\">>\n# yum install lighttpd lighttpd-fastcgi lighttpd-mod_geoip\n<</code>>", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2013-05-14T10:30:00Z", "path": 17, "slug": "lighttpd-install-howto-with-yum-on-centos", "published": true}, "model": "yacms.pages", "pk": 17}, {"fields": {"meta_description": "", "date_modified": "2009-12-09T20:00:00Z", "title": "How To Check Swap Usage On Linux", "frontpage": true, "content": "How do I check swap (paging) usage under Linux operating systems from the command line?Swap space (also known as paging) is nothing but computer memory management involving swapping regions of memory to and from storage. You can see swap usage summary by device using any one of the following commands. You may have to login as root user to use the following commands. The maximum useful size of a swap area depends on the architecture and the kernel version. For Linux kernels after v2.3.3+ there is no such limitation on swap size.\n\n===Method 1: Read /proc/swaps file\n<<code ext=\"bash\">>\n#cat /proc/swaps\n<</code>>\n\nThe output looks something like as follows: \n\n<<code ext=\"bash\">>\nFilename\t\t\t\tType\t\tSize\tUsed\tPriority\n/dev/dm-1                               partition\t8273916\t0\t-1\n<</code>>\n\n===Method 2: free command\n\n<<code ext=\"bash\">>\n# free -g\n# free -k\n# free -m\n\n<</code>>\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2009-11-01T23:39:00Z", "path": 18, "slug": "howto-check-swap-usage-in-linux", "published": true}, "model": "yacms.pages", "pk": 18}, {"fields": {"meta_description": "", "date_modified": "2012-05-09T20:00:00Z", "title": "How-To: Recover Root Password Under CentOS With Single User Mode", "frontpage": true, "content": "It happens sometime that you can't remember root password. On Linux, recovering root password can be done by booting Linux under a specific mode: single user mode.\nThis tutorial will show how to boot Linux in single user mode when using GRUB and finally how to change root password.\n\nDuring normal usage, a Linux OS runs under runlevels between 2 and 5 which corresponds to various multi-user modes. Booting Linux under runlevel 1 will allow one to enter into a specific mode, single user mode. Under such a level, you directly get a root prompt. From there, changing root password is a piece of cake.\n\n===1. Entering Runlevel 1\n\nSome Linux distribution, such as Ubuntu for instance, offer a specific boot menu entry where it is stated \"Recovery Mode\" or \"Single-User Mode\". If this is your case, selecting this menu entry will boot your machine into single user mode, you can carry on with the next part. If not, you might want to read this part.\n\nUsing GRUB, you can manually edit the proposed menu entry at boot time. To do so, when GRUB is presenting the menu list (you might need to press ESC first), follow those instructions:\n\nuse the arrows to select the boot entry you want to modify.\npress e to edit the entry\nuse the arrows to go to kernel line\npress e to edit this entry\nat the end of the line add the word single\npress ESC to go back to the parent menu\npress b to boot this kernel\nThe kernel should be booting as usual (except for the graphical splash screen you might be used to), and you will finally get a root prompt (sh#).\n\nHere we are, we have gained root access to the filesystem, let's finally change the password.\n\n===2. Changing Root Password\n\nAs root, changing password does not ask for your old password, therefore running the command:", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2012-05-09T19:54:00Z", "path": 19, "slug": "how-to-recover-root-password-under-centos-with-single-user-mode", "published": true}, "model": "yacms.pages", "pk": 19}, {"fields": {"meta_description": "", "date_modified": "2014-08-21T16:17:12.846Z", "title": "Nginx", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-21T16:17:12.847Z", "path": 20, "slug": "nginx", "published": false}, "model": "yacms.pages", "pk": 20}, {"fields": {"meta_description": "", "date_modified": "2014-05-12T20:00:00Z", "title": "Howto Install Nginx on CentOS 6 using Yum", "frontpage": true, "content": "==About Nginx\nnginx is a high performance web server software. It is a much more flexible and lightweight program than apache.  This is a beginners tutorial. It will show you how to install and configure a basic virtualhost so that you can run your website on nginx.\n\n==Step One\u2014Install EPEL\nEPEL stands for Extra Packages for Enterprise Linux. Because yum as a package manager does not include the latest version of nginx in its default repository, installing EPEL will make sure that nginx on CentOS stays up to date. \n\nTo install EPEL, open terminal and type in:\n\nsudo su -c 'rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm'\n\n==Step Two\u2014Install nginx\nTo install nginx, open terminal and type in:\nsudo yum install nginx\n\nAfter you answer yes to the prompt twice (the first time relates to importing the EPEL gpg-key), nginx will finish installing on your virtual private server. \n\nStep Three\u2014Start nginx\nnginx does not start on its own. To get nginx running, type:\nsudo /etc/init.d/nginx start\n\nYou can confirm that nginx has installed on your VPS by directing your browser to your IP address. \n\nYou can run the following command to reveal your server\u2019s IP address.\nifconfig eth0 | grep inet | awk '{ print $2 }'\n\nOn the page, you will see the words, \u201cWelcome to nginx\u201d \n\nCongratulations! You have now installed nginx.", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-03-12T16:17:00Z", "path": 21, "slug": "howto-install-nginx-on-centos-6-using-yum", "published": true}, "model": "yacms.pages", "pk": 21}, {"fields": {"meta_description": "", "date_modified": "2013-12-16T20:00:00Z", "title": "Signal and Slots Implementation In Python", "frontpage": true, "content": "\"Signals and slots are used for communication between objects. The signals and slots mechanism is a central feature of Qt and probably the part that differs most from the features provided by other frameworks\". I literally copied that off from the QT Signals and Slots documentation. Until recently I didn't really use signal and slots much in my python code. I knew about them but did not really see the need. Until I started using QT and realized how great they are at decoupling my classes. \n\nBelow is an implemntation that I use a lot. \n\n<<code ext=\"python\">>\nfrom __future__ import print_function\nimport inspect\nfrom weakref import WeakSet, WeakKeyDictionary\n\nclass Signal(object): \n    def __init__(self):\n        self._functions = WeakSet()\n        self._methods = WeakKeyDictionary()\n\n    def __call__(self, *args, **kargs):\n        # Call handler functions\n        for func in self._functions:\n            func(*args, **kargs)\n\n        # Call handler methods\n        for obj, funcs in self._methods.items():\n            for func in funcs:\n                func(obj, *args, **kargs)\n\n    def connect(self, slot):\n        if inspect.ismethod(slot):\n            if slot.__self__ not in self._methods:\n                self._methods[slot.__self__] = set()\n\n            self._methods[slot.__self__].add(slot.__func__)\n\n        else:\n            self._functions.add(slot)\n\n    def disconnect(self, slot):\n        if inspect.ismethod(slot):\n            if slot.__self__ in self._methods:\n                self._methods[slot.__self__].remove(slot.__func__)\n        else:\n            if slot in self._functions:\n                self._functions.remove(slot)\n\n    def clear(self):\n        self._functions.clear()\n        self._methods.clear()\n\n\nclass Emitter(object):\n    \n    def __init__(self):\n        self.changed= Signal()\n        self.second_value_changed = Signal()\n        \n        self.value = None\n        \n    def set_value(self, value):\n        self.changed(value)\n    \n    def set_second_value(self, value):\n        self.second_valued_changed()\n        \nclass Reciever(object):\n    \n    def emitter_updated(self, *args, **kwargs):\n        \n        print(\"Signal recieved\")\n        print(*args)\n        print(**args)\n              \n              \ne = Emitter()\nr = Reciever()\n\ne.changed.connect(r.emitter_updated)\n                                                                                                    \n<</code>>\n\n== Class Emitter\n\nThe \"Emitter\" class is an example of a class that will send a message whenever  \"value\" is changed.  \n\n== Class Receiver\n\nThe \"Receiver\" class has a method called \"emitter_updated\". This receives the signal whenever \"value\" is changed in the \"Emitter\" class. \n\n== Emitter and Receiver are decoupled. \n\nThe code snippet shows the Emitter and the Receiver class know nothing about each other. When we create an instance , we \"connect\" them as follows:\n\n<<code ext=\"python\">>\ne = Emitter()\nr = Reciever()\n\ne.changed.connect(r.emitter_updated)\n<</code>>", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2013-12-16T16:18:00Z", "path": 22, "slug": "signal-and-slots-implementation-in-python", "published": true}, "model": "yacms.pages", "pk": 22}, {"fields": {"meta_description": "", "date_modified": "2014-08-21T16:21:13.612Z", "title": "Databases", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-21T16:21:13.612Z", "path": 23, "slug": "databases", "published": false}, "model": "yacms.pages", "pk": 23}, {"fields": {"meta_description": "", "date_modified": "2014-08-21T16:21:32.166Z", "title": "Postgresql", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-21T16:21:32.166Z", "path": 24, "slug": "postgresql", "published": false}, "model": "yacms.pages", "pk": 24}, {"fields": {"meta_description": "", "date_modified": "2012-11-14T20:00:00Z", "title": "Howto Backup and Restore your PostgreSQL databases", "frontpage": true, "content": "Every installation of postgresql datbases comes with the command line tools pg_dump and pg_restore. With this two commands we have all that we need to backup and restore our databases. Of course there are also graphical tools that we can use to backup and restore. \n\n==Backup and restore with pg_dump and pg_restore. \n\nThe TLDR; is as sample as: \n\nFor text file backups: \n\n<<code ext=\"bash\">>\nBackup:  $ pg_dump -U {user-name} {source_db} -f {dumpfilename.sql}\nRestore: $ psql -U {user-name} -d {desintation_db}-f {dumpfilename.sql}\n<</code>>\n\nFor tar.gz backups: \n\n<<code ext=\"bash\">>\nBackup:  $ pg_dump -U {user-name} {source_db} -F tar  -f {dumpfilename.tar.gz}\nRestore: $ psql -U {user-name} -d {desintation_db}-f {dumpfilename.tar.gz}\n<</code>>\n\n== Backup A Single Database\n\nThe following command will backup the \"mydatabase\" that belongs to \"dbuser\" to the file mybackup.sql\n\n<<code ext=\"bash\">>\npg_dump -h 127.0.0.1 -U dbuser mydatabase -f mybackup.sql\n<</code>>\n\nYou will be prompted for the password. If you were going to put this in a script, then you can set the environment variable PGPASSWORD and pg_dump will use it instead of prompting you as follows:\n\n<<code ext=\"bash\">>\nPGPASSWORD=\"mypassword\" \npg_dump -h 127.0.0.1 -U dbuser mydatabase -f mybackup.sql\n<</code>>\n\n== Restoring the backup\n\nAbove we created our backup.\n\nTo restore the .sql file backup assuming the database already exists:\n\n<<code ext=\"bash\">>\npg_restore -h 127.0.0.1 -U dbuser  -d mydatabase mybackup.sql\n<</code>>\n\nIf the database does not yet exist. (For example we are restoring to a new server)\n\n<<code ext=\"bash\">>\npg_restore -h 127.0.0.1 -U dbuser  -C -d  mydatabase mybackup.sql\n<</code>>\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2012-11-14T16:21:00Z", "path": 25, "slug": "howto-backup-and-restore-your-postgresql-databases", "published": true}, "model": "yacms.pages", "pk": 25}, {"fields": {"meta_description": "", "date_modified": "2010-02-15T20:00:00Z", "title": "How To Setup Crontab Under Linux Or Unix", "frontpage": true, "content": "How do I add a cronjob on Linux? Thats a question even some veterans ask all the time, something that is easily forgotten. At times I have forgotten the exact incantation so I wrote this down. I hope it is useful to someone else as it is for me. We use cron jobs to schedule commands to be executed periodically. Entries in the cron can be commands as you would execute them on the command line or they can be scripts. The cron service runs in the background and reads the /etc/crontab and the /etc/cron,* directories. It also checks entries in /var/spool/cron directory. Users also have their own cron. \n\n==Editing cron entries. \n\nAlthough you can edit the files directly with your favourite editor, (vi , emacs, nano.. etc..) you should instead invoke your default system editor using the \"crontab\" command. This will open the file and load up the cron entries and also do other things such as validation on save. Each user can also have their own crontab file. These files are saved in /var/spool/cron/crontabs. Running \"crontab\" as a normal user will open the user's relevant crontab file. \n\n==The linux system crontab vs user crontab\n\n* **/etc/crontab** aka system crontab. This is owned by root and anything placed in here runs as root by default. This is usually for jobs that requires root privileges. However you can also put the user in the 6th field and it will run the command as the user.\n\n* **The user crontabs**: Normal users can not edit the system crontab. However they have their own crontab entries. All commands run as the user who setup the crontab. One could of course use sudo to get around this if they have the sudo rights. \n\n==How Do I Install or create or edit my own cron jobs.\n\n<<code ext=\"bash\">>\ncrontab -e\n<</code>>\n\nThe syntax of crontab is as follows:\n\n<<code ext=\"bash\">>\n1 2 3 4 5 /path/to/command arg1 arg2\n <</code>>\nOR\n<<code ext=\"bash\">>\n1 2 3 4 5 /root/backup.sh\n<</code>>\n\nWhere,\n\n1: Minute (0-59)\n2: Hours (0-23)\n3: Day (0-31)\n4: Month (0-12 [12 == December])\n5: Day of the week(0-7 [7 or 0 == sunday])\n/path/to/command - Script or command name to schedule\nEasy to remember format:\n\n<<code ext=\"bash\">>\n* * * * * command to be executed\n- - - - -\n| | | | |\n| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)\n| | | ------- Month (1 - 12)\n| | --------- Day of month (1 - 31)\n| ----------- Hour (0 - 23)\n------------- Minute (0 - 59)\n<</code>>\n\nYour cron job looks as follows for system jobs:\n\n<<code ext=\"bash\">>\n1 2 3 4 5 USERNAME /path/to/command arg1 arg2\n<</code>>\nOR\n<<code ext=\"bash\">>\n1 2 3 4 5 USERNAME /path/to/script.sh\n<</code>>\n\n==Special operator for time settings.\n\nHow do I use operators?\n\nAn operator allows you to specifying multiple values in a field. There are three operators:\n\n* The asterisk (*) : This operator specifies all possible values for a field. For example, an asterisk in the hour time field would be equivalent to every hour or an asterisk in the month field would be equivalent to every month.\n* The comma (,) : This operator specifies a list of values, for example: \"1,5,10,15,20, 25\".\n* The dash (-) : This operator specifies a range of values, for example: \"5-15\" days , which is equivalent to typing \"5,6,7,8,9,....,13,14,15\" using the comma operator.\n* The separator (/) : This operator specifies a step value, for example: \"0-23/\" can be used in the hours field to specify command execution every other hour. Steps are also permitted after an asterisk, so if you want to say every two hours, just use */2.\n\nhttp://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2010-02-15T09:20:00Z", "path": 26, "slug": "howto-setup-crontab-under-linux-or-unix", "published": false}, "model": "yacms.pages", "pk": 26}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T09:22:29.732Z", "title": "OS X ", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T09:22:29.732Z", "path": 27, "slug": "apple-os-x", "published": false}, "model": "yacms.pages", "pk": 27}, {"fields": {"meta_description": "", "date_modified": "2013-09-27T20:00:00Z", "title": "Enable Safari Developer Tools", "frontpage": true, "content": "Personally I use Macs, 27 inch 2011 Mac for my desktop [pimped up with 32 gigs ram which I upgraded myself for less than 200 euros] and on the go, I use a macbook air. Safari is the default browser and I have no issues with it. Apart from the fact that I have to consciously open Chrome when I am developing a website so that I can use Chrome's developer tools. Sure I could just make Chrome the default browser but I don't want to. Which got me asking , why is there no Developer Tools for Safari. As it turns out, there is! One just needs to enable it.\n\nI would have thought it was a simple drag and drop customisation thing or just go to system preferences and click enable Developer Tools or something like that. Apples official [[https://developer.apple.com/safari/tools/ | Apple Developer Tools] page is also of no help.\n\n I know right now you are probably saying, wtf jnvilo, you are a linux guy, linux user for 15 years , you should be used to this! But alas my friend, the moment I get to a Mac Desktop, I expect it to behave like a mac desktop. After all these days, all my linux work are always done via terminal. On Mac we have iTerm which compares very well against linux's terminator. But I digress... back to Safari Developer Tools. \n\nSo without further ado, here is how I did it.\n\n\n# Turn on the \"developer menu\"\n## Open Safari Menu\n## Click Preferences\n## Go to Advanced tab\n## Click Show Develop menu in menu bar\n\nAnd Now you have it!\n\n \n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2013-09-26T09:22:00Z", "path": 28, "slug": "enable-safari-developer-tools", "published": true}, "model": "yacms.pages", "pk": 28}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T20:00:00Z", "title": "Enable GZIP Compression in NGINX", "frontpage": true, "content": "Nginx comes out of the box capable of compressing your web pages and other contents. All that you need to do is enable it. The client must support receiving gzip compressed data. All you need to do is put the following configuration in your website's virtual host configuration or in the default. \n\n<<code ext=\"bash\">>\ngzip             on;\n#gzip_min_length  1000;\ngzip_http_version 1.1;\ngzip_vary on;\ngzip_comp_level 6;\ngzip_proxied any;\ngzip_types text/plain text/html text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml;\n#it was gzip_buffers 16 8k; \ngzip_buffers 128 4k; #my pagesize is 4\ngzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n<</code>>", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2013-12-09T09:24:00Z", "path": 29, "slug": "enable-gzip-compression-in-nginx", "published": true}, "model": "yacms.pages", "pk": 29}, {"fields": {"meta_description": "", "date_modified": "2014-03-12T20:00:00Z", "title": "Installing Nginx And PHP on OS X", "frontpage": true, "content": "I hate using PHP. There was a time I loved it and looked forward to the release of PHP 5. These days I I use it only when I really have to, for example being asked to update or troubleshoot an old code base.  Normally I would just create a virtual machine with linux on it, but this time I thought I would use homebrew to instal a local stack on my Maverick development machine. So here goes:\n\n* Mac OS X Maverick\n* Nginx \n* PHP 5.4 as a FastCGI using PHP-FPM\n\n==Installing Homebrew\n\n<<alert level=block>>\nIf you already have homebrew installed then skip to the next section.  If you use ports or fink, then this tutorial is not for you. Installing homebrew with ports or fink is doable but you are on your own.\n<</alert>>\n\nIf you have not used or heard of homebrew before, then Homebrew is a package manager very similar to gentoo's package management system. It will download and compile and install any open souirce software you need.  \n\n===First install Apple Command Line Developer Tools\n\nThe command line developer tools can be downloaded from Apple's developer website at https://developer.apple.com/downloads/index.action?name=for%20Xcode%20-\n\nOnce the command line tools have been installed, installing Homebrew is as simple as: \n\n<<code ext=\"bash\">>\nruby -e \"$(curl -fsSkL raw.github.com/mxcl/homebrew/go)\"\n    ...\n    ==> /usr/bin/sudo /usr/bin/chgrp admin /usr/local/. /usr/local/bin\n    ==> Downloading and Installing Homebrew...\n    ==> Installation successful!\n    You should run `brew doctor' *before* you install anything.\n<</code>>\n\n===Install PHP 5.4 With FPM on Mac OS X \n\n<<code ext=\"bash\">>\nbrew search php\n<</code>>\n\nThis will give you a long list of available brews for php 5.2, 5.3, 5.4 packages. We need 5.4 and specifically from a certain brew\n\n<<code ext=\"bash\">>\nbrew tap josegonzales/php\nbrew tap homebrew/dupes\n<</code>>\n\nWe can list the options for installing php54 with the following command.\n\n<<code ext=\"bash\">>\nbrew options php54\n<</code>>\n\nWe shall build it with the following command\n\n<<code ext=\"bash\">>\nbrew install php54 --with-fpm  --with-imap  --without-apache --with-debug\n<</code>>\n\nThis will take some time. Go make some coffee, play with your kids if you have any or whatever.. After a long wait we can verify the php and php-fpm version we have installed using the following commands:\n\n<<code ext=\"bash\">>\nphp -v\nphp-fpm\n<</code>>\n\n===Ensuring that PHP-FPM starts when we start OS X\n\n<<alert level=\"info\">>\nNote that: If you will follow my configurations section, then you do not need this part since we will not be using these start/stop scripts. Skip directly to Configuration. \n<</alert>>\nIf you want that php-fpm is automatically started do:\n\n<<code ext=\"bash\">>\ncp /usr/local/Cellar/php54/5.4.15/homebrew-php.josegonzalez.php54.plist ~/Library/LaunchAgents/\n<</code>>\n\nOtherwise you can use the following to start and stop\n\n**To Start**:\n<<code ext=\"bash\">>\nlaunchctl load -w ~/Library/LaunchAgents/homebrew-php.josegonzalez.php54.plist\n<</code>>\n\n**To Stop**:\n<<code ext=\"bash\">>\nlaunchctl unload -w ~/Library/LaunchAgents/homebrew-php.josegonzalez.php54.plist\n<</code>>\n\n==Installing Nginx on Mac OS X\n<<code ext=\"bash\">>\nbrew install nginx\n<</code>>\n\n<<alert level=\"info\">>\nThe following steps are  only if you are going to use the standard setup and configuration found in /usr/local/etc/nginx/..  The configuration method I will show does not use this method so skip this step if you wish to configure your OS X development box like how I show you.\n<</alert>>\n\nCopy the start/stop script. If you plan to use them. On my development machine, I do not use them since I prefer to use my own start stop scripts and also use custom configurations which will become clear further down in the Configurations Section. You can just skip this part if you wish. \n\n<<code ext=\"bash\">>\ncp /usr/local/Cellar/nginx/1.4.1/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/\n<</code>>\n\n**To Start**\n<<code ext=\"bash\">>\nlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist\n<</code>>\n\n**To Stop**\n<<code ext=\"bash\">>\nlaunchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist\n<</code>>\n\n==Configuration\n\nOK we now have the required software in place. We only now need to configure.  For my projects and websites I like to have the following structure. At the minimum below is what I have:\n\n<<code ext=\"bash\">>\n$PROJECT_HOME/bin          # The bin directory shall contain our start/stop scripts\n$PROJECT_HOME/etc          # The etc directory  shall contain the nginx and php-fpm configuration\n$PROJECT_HOME/htdocs    # This is where the website home is. \n$PROJECT_HOME/logs        #  This is where we keep the logs \n<</code>>\n\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2012-08-22T09:26:00Z", "path": 30, "slug": "installing-nginx-and-php-on-os-x", "published": true}, "model": "yacms.pages", "pk": 30}, {"fields": {"meta_description": "ESX Setup on VMWARE Fusion", "date_modified": "2014-06-11T20:00:00Z", "title": "Installing ESXi On VMWARE Fusion on OS X ", "frontpage": true, "content": "Needing a development environment for my scripting tasks on ESX, tonight I decided to install ESXi on my Mac. I have 32 Gigs of ram and lots of disk space to spare so I decided to install VMware fusion and then virtualize ESXi in it. I thought it would be harder but frankly it was not!. \r\n\r\nI am not exactly a VMware Admin but I work a lot on provisioning and maintaining vm's running on ESX Clusters. My tools of the trade are Foreman and Puppet and a few ruby scripts using rbmomi and I wouldn't call myself a Ruby guy either, at times I have also done powershell. And over time have accumulated an assortment of scripts in my toolchest. However my meat and butter in scripting is python so to speak.  VMware recently release pyvmomi  [[ https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0CCgQFjAB&url=https%3A%2F%2Fgithub.com%2Fvmware%2Fpyvmomi&ei=8pGPU7ytOOmQ7AbA3YDIDg&usg=AFQjCNGQlZjmtLctNr5LMjeGbBqDSQqATQ&bvm=bv.68235269,d.ZGU | pyvmomi ]] and so I decided I would just rewrite everything in python in a single python pip installable library package. \r\n\r\n==Install ESXi on Vmware Fusion\r\n\r\nTo achieve that, I basically just followed the instructions from  [[ http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2009580 | Installing ESXi in VMware Fusion (2009580) ]] The only change I had to do was to configure the ESXi vm's network interface to use Bridged Network rather than Internet Sharing such that the VM is accessible and has an IP in my home network. ", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-06-11T09:29:00Z", "path": 31, "slug": "installing-esxi-on-vmware-fusion-on-os-x-", "published": true}, "model": "yacms.pages", "pk": 31}, {"fields": {"meta_description": "", "date_modified": "2010-01-06T20:00:00Z", "title": "Django RuntimeError: App registry isn't ready yet with Tastypie", "frontpage": true, "content": "Django 1.7  way of app-loading has changed and as a result, Tastypie is broken for 1.7 and although a patch is already out, there is yet no release so in order to use tastypie with Django 1.7 you have to patch compat.py yourself. This can be easily done by the following steps:\n\n\n1) Get tastypie from git \n\n<<code ext=\"bash\">>\ngit clone https://github.com/toastdriven/django-tastypie.git\n<</code>>\n\n2) Make sure you are inside the tastypie directory\n\n<<code ext=\"bash\">>\ncd django-tastypie/tastypie\n<</code>>\n\n3) replace compat.py with uu3k's patch file from: https://github.com/un33k/django-tastypie/commit/9efaef961d5c07db85ab3882a428407eedf1c285 or just wget the raw file: \nwget https://raw.githubusercontent.com/un33k/django-tastypie/9efaef961d5c07db85ab3882a428407eedf1c285/tastypie/compat.py\n\n4) Now Install your patched version \n\n<<code ext=\"bash\">>\n cd ../../ ; pip install  django-tastypie\n<</code>>\n\n<<alert label=info>>\nUntil Tastypie supports 1.7 I am keeping a patched version of it in my github , you can just clone and install it by doing </br>\n\npip install -e https://github.com/jnvilo/django-tastypie.git\n\n\n\n\n\n\n\n<</alert>>\n\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-08-22T09:31:00Z", "path": 32, "slug": "django-runtimeerror-app-registry-isnt-ready-yet--with-tastypie", "published": true}, "model": "yacms.pages", "pk": 32}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:02:53.598Z", "title": "Virtualization", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:02:53.599Z", "path": 34, "slug": "virtualization", "published": false}, "model": "yacms.pages", "pk": 34}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:03:09.122Z", "title": "Docker", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:03:09.122Z", "path": 35, "slug": "docker", "published": false}, "model": "yacms.pages", "pk": 35}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:03:30.131Z", "title": "VMWare", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:03:30.132Z", "path": 36, "slug": "vmware", "published": false}, "model": "yacms.pages", "pk": 36}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:03:37.033Z", "title": "VirtualBox", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:03:37.033Z", "path": 37, "slug": "virtualbox", "published": false}, "model": "yacms.pages", "pk": 37}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:04:28.429Z", "title": "XEN", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:04:28.429Z", "path": 38, "slug": "xen", "published": false}, "model": "yacms.pages", "pk": 38}, {"fields": {"meta_description": "", "date_modified": "2014-08-22T10:04:35.843Z", "title": "KVM", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-08-22T10:04:35.844Z", "path": 39, "slug": "kvm", "published": false}, "model": "yacms.pages", "pk": 39}, {"fields": {"meta_description": "", "date_modified": "2014-08-26T14:48:59.393Z", "title": "Howto: Install And Use Docker on Fedora 20", "frontpage": false, "content": "Install Docker Via Yum\n\nThe fedora repo provides the docker-io. So as root or using sudo , execute:\n\n<<code ext=\"bash\">>\nyum -y install docker-io\n<</code>>", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-08-26T14:48:59.420Z", "path": 40, "slug": "howto-install-and-use-docker-on-fedora-20", "published": false}, "model": "yacms.pages", "pk": 40}, {"fields": {"meta_description": "My blogs on tech stuff.", "date_modified": "2014-10-01T20:27:52Z", "title": "Tech Stuff", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-10-01T20:28:31.960Z", "path": 42, "slug": "techstuff", "published": false}, "model": "yacms.pages", "pk": 41}, {"fields": {"meta_description": "", "date_modified": "2009-10-01T20:00:00Z", "title": "How to list all hidden files in a directory recursively", "frontpage": false, "content": "We were all new to linux at one point and using the find command was the first thing I learnt.  If  you need to find and list all hidden files and directories  You need to use the find command to list all hidden files recursively on a Linux or Unix like systems.\n\n\n=== The basic command is as follows:\n\n<<code ext=\"bash\">>\nfind /dir/to/search/ -name \".*\" -print\n<</code>>\nOR\n\n<<code ext=\"bash\">>\nfind /dir/to/search/ -name \".*\" -ls\n<</code>>\nOR search only hidden files:\n<<code ext=\"bash\">>\nfind /dir/to/search/ -type f -iname \".*\" -ls\n<</code>>\nOR search only hidden directories:\n<<code ext=\"bash\">>\nfind /dir/to/search/ -type d -iname \".*\" -ls\n<</code>>\nOR\n<<code ext=\"bash\">>\nfind /dir/to/search -path '*/.*' -print\nfind /dir/to/search -path '*/.*' -ls\n<</code>>\n\nIn this example, search $HOME for all hidden files and dirs:\n\n<<code ext=\"bash\">>\nfind $HOME -name \".*\" -ls\n <</code>>\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2009-10-01T20:34:00Z", "path": 43, "slug": "how-to-list-all-hidden-files-in-a-directory-recursively", "published": true}, "model": "yacms.pages", "pk": 42}, {"fields": {"meta_description": "", "date_modified": "2014-10-02T20:00:00Z", "title": "Install Postgresql On Centos 6.5 Via-Yum", "frontpage": true, "content": "Installing PostgreSQL on a Centos 6.5 is as simple as \"yum install postgresql\" but you're probably here because you want to install a newer version of PostgreSQL and also want more information on how to configure it.  I Do not use the stock postgresql myself. I always want the latest. Centos 6.X ships with postgresql 8.4.13 but postgresql 9.x has been out for a while now. So In this howto, we are going to be installing Postgresql 9.3. \n\n\n==Add the PostGres Yum repository \n\n<<code ext=\"bash\">>\nrpm -Uvh http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm\n<</code>>\n\n==Install PostgreSQL Server\nSince we added the postgres repo, we can now install rpms' from it. Use following command to install PostgreSQL on your system with yum package manager.\n\n<<code ext=\"bash\">>\n# yum install postgresql93-server postgresql93\n<</code>>\n\nIf you are going to be using python's psycopg2 then you will also probably need the devel. \n<<code ext=\"bash\">>\nyum install postgresql93-devel\n<</code>>\n\n\n==Initialize PGDATA\n\nAfter installing PostgreSQL server, It\u2019s required to initialize it before using first time. To initialize database use below command.\n\n<<code ext=\"bash\">>\n# /etc/init.d/postgresql-9.3 initdb\n<</code>>\n\nIn some cases above commands doesn't work, Then use following command.\n\n<<code ext=\"bash\">>\n# /usr/pgsql-9.3/bin/postgresql93-setup initdb\n<</code>>\n\nAbove command will take some time to initialize PostgreSQL first time. PGDATA environment variable contains path of data directory.\nPostgreSQL data directory Path: /var/lib/pgsql/9.3/data/\n\n==Start PostgreSQL Server\n\nStart PostgreSQL service using following command.\n<<code ext=\"bash\">>\n# service postgresql-9.3 start\n<</code>>\n\n==Setup PostgreSQL service to auto start on system boot.\n\n<<code ext=\"bash\">>\n# chkconfig postgresql-9.3 on\n<</code>>\n\n\n==Verify PostgreSQL Installation\nAfter completing step 4, we have installed postgres 9.3 on server, Let do a basic test to verify that installation completed successfully. To verify switch to postgres user.\n<<code ext=\"bash\">>\n# su - postgres\n<</code>>\n\n\n==Use psql command to access PostgreSQL prompt with admin privileges.\n\n<<code ext=\"bash\">>\n$ psql\n\npsql (9.3.1)\nType \"help\" for help.\n\npostgres=#\n<</code>>\n\nCongratulation\u2019s! You have successfully installed PostgreSQL Server. Read below article to install phpPgAdmin.\n\n", "page_type": "HTMLVIEW", "template": "htmlview.html", "date_created": "2014-03-03T07:39:00Z", "path": 44, "slug": "install-postgresql-on-centos-65-via-yum", "published": true}, "model": "yacms.pages", "pk": 43}, {"fields": {"meta_description": "", "date_modified": "2014-10-02T07:57:06.146Z", "title": "Apache", "frontpage": false, "content": "Empty", "page_type": "CATEGORYVIEW", "template": "categoryview.html", "date_created": "2014-10-02T07:57:06.146Z", "path": 45, "slug": "apache", "published": false}, "model": "yacms.pages", "pk": 44}]